{
    "version": "1.17",
    "alias": "pxr_usd_helpers",
    "color": "#00a5e6",
    "mute": false,
    "solo": false,
    "meta_data": {
        "positions": {
            "/BatchNamespaceEdit": [
                3022.6486693399356,
                155.5903594975444
            ],
            "/ComputeUsdStageStats": [
                3065.8392245551954,
                284.95482154320405
            ],
            "/FindAllVariants": [
                3071.1357713097223,
                59.58111725644964
            ],
            "/ListModules": [
                2982.850671172257,
                -33.181594117255784
            ]
        }
    },
    "nodes": {
        "/BatchNamespaceEdit": {
            "attrs": {
                "new_prim": {
                    "type": "raw",
                    "value": "/pathToNewPrim"
                },
                "object": {
                    "comment": "['prim', 'primProperty', 'varaintPrim', 'variantProperty']",
                    "type": "list",
                    "value": "['prim', 'primProperty', 'varaintPrim', 'variantProperty']"
                },
                "parent_prim": {
                    "type": "raw",
                    "value": "/pathToNewParent"
                },
                "prim": {},
                "use": {
                    "comment": "['rename', 'reparent', 'remove']",
                    "type": "list",
                    "value": "['rename', 'reparent', 'remove']"
                }
            },
            "code": [
                "\"\"\"",
                "BatchNamespaceEdit prims: re-parent/re-name/remove",
                "    edit.Add(\"/C\", \"/D\")  # Prim renames",
                "    edit.Add(\"/G\", \"/E/G\")  # Prim reparents",
                "    edit.Add(\"/I\", \"/E/H\")  # Prim reparent/rename",
                "    edit.Add(\"/J\", \"/L/J\")  # Prim reparent",
                "    edit.Add(\"/L/J/K\", \"/K\")  # Prim reparent from under a reparented prim",
                "    edit.Add(\"/X\", Sdf.Path.emptyPath)  # Prim remove",
                "    edit.Add(\"/E\", Sdf.Path.emptyPath)  # Prim with descendants remove",
                "",
                "    edit.Add(\"/P.c\", \"/P.d\")  # Prim property renames",
                "    edit.Add(\"/P.g\", \"/Q.g\")  # Prim property reparents",
                "    edit.Add(\"/P.i\", \"/Q.h\")  # Prim property reparent/rename",
                "    edit.Add(\"/P.x\", Sdf.Path.emptyPath)  # Prim property remove",
                "",
                "    edit.Add(\"/S\", \"/T\")  # Rename prim used in targets",
                "",
                "    edit.Add(\"/V{v=one}U\", \"/V{v=two}W/U\")  # Variant prim reparent/rename",
                "    edit.Add(\"/V{v=two}W\", Sdf.Path.emptyPath)  # Variant prim remove",
                "    edit.Add(\"/V{v=one}.u\", \"/V{v=two}.u\")  # Variant property reparent/rename",
                "    edit.Add(\"/V{v=two}.w\", Sdf.Path.emptyPath)  # Variant property remove",
                "\"\"\"",
                "edit = Sdf.BatchNamespaceEdit()",
                "",
                "if ${object} == 'prim': ",
                "    if ${use} == 'rename':",
                "        # edit.Add(\"/C\", \"/D\")",
                "        edit.add(self.prim.GetPath(), '${new_prim}')",
                "    elif ${use} == 'reparent':",
                "        # edit.Add(\"/G\", \"/E/G\")",
                "        edit.Add(self.prim.GetPath(), '${parent_prim}' + self.prim.GetPath())",
                "    elif ${use} == 'remove':",
                "         # edit.Add(\"/X\", Sdf.Path.emptyPath)",
                "         del self.prim",
                "         edit.Add(self.prim.GetPath(), Sdf.Path.emptyPath)",
                "    else:",
                "        assert ('Use: {} is not a legal value please use {}'.foramt((${use}, ['rename', 'reparent', 'remove'])) ",
                "elif ${object} == 'primProperty':",
                "    edit.Add(\"/P.c\", \"/P.d\")  # Prim property renames",
                "    edit.Add(\"/P.g\", \"/Q.g\")  # Prim property reparents",
                "    edit.Add(\"/P.i\", \"/Q.h\")  # Prim property reparent/rename",
                "    edit.Add(\"/P.x\", Sdf.Path.emptyPath)  # Prim property remove",
                "elif ${object} == 'varaintPrim':",
                "    edit.Add(\"/V{v=one}U\", \"/V{v=two}W/U\")  # Variant prim reparent/rename",
                "    edit.Add(\"/V{v=two}W\", Sdf.Path.emptyPath)  # Variant prim remove",
                "elif ${object} == 'variantProperty':",
                "    edit.Add(\"/V{v=one}.u\", \"/V{v=two}.u\")  # Variant property reparent/rename",
                "    edit.Add(\"/V{v=two}.w\", Sdf.Path.emptyPath)  # Variant property remove",
                "else:",
                "    assert ('Object: {} is not a legal value please use {}'.foramt((${object}, ['prim', 'primProperty', 'varaintPrim', 'variantProperty']))",
                "",
                "before = layer.ExportToString()",
                "print('Will applying this layer fail?', not layer.CanApply(edit))",
                "assert layer.Apply(edit)",
                "after = layer.ExportToString()",
                ""
            ]
        },
        "/ComputeUsdStageStats": {
            "attrs": {
                "rootlayer": {}
            },
            "code": [
                "rootlayerpath = self.stage.GetRootLayer().GetPath()",
                "Usd.Utils.ComputeUsdStageStats(rootlayerpath)"
            ]
        },
        "/FindAllVariants": {
            "attrs": {
                "prim": {},
                "variant_options": {},
                "variant_set_names": {},
                "variant_set_selection": {}
            },
            "code": [
                "vsets = self.prim.GetVariantSets()",
                "self.variant_set_names = vsets.GetNames()",
                "self.variant_set_selection = {}",
                "self.variant_options = {}",
                "",
                "for vset_name in variant_set_names:",
                "    print('  variant set:', vset_name)",
                "    vset = vsets.GetVariantSet(vset_name)",
                "    selection = vset.GetVariantSelection()",
                "    variant_set_selection[vset_name] = selection",
                "    print('    has selection:', selection)",
                "    print('    has options:')",
                "    opt_list = []",
                "    for opt in vset.GetVariantNames():",
                "        opt_list.append(opt)",
                "        print('      ', opt)",
                "    variant_options[vset_name] = opt_list",
                "",
                ""
            ]
        },
        "/ListModules": {
            "start_point": true,
            "attrs": {
                "module": {
                    "comment": "Helps you find useful attrs and modules",
                    "type": "raw",
                    "value": "UsdGeom"
                }
            },
            "code": [
                "list = dir(${module})",
                "print('Module: ', '${module}')",
                "for item in list:",
                "    if not '__' in item:",
                "        print('Main Attribute: ', item)",
                "        # print(dir(getattr(${module}, item)))",
                "        sub_list = dir(getattr(${module}, item))",
                "        new_list = []",
                "        for sub_item in sub_list:",
                "            if not '__' in sub_item:",
                "                new_list.append(sub_item)",
                "            else:",
                "                pass",
                "        print('Sub List: ', new_list)",
                "                ",
                "    "
            ]
        }
    }
}